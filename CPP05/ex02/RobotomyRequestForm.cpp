#include "RobotomyRequestForm.hpp"

RobotomyRequestForm::RobotomyRequestForm(void) : AForm("RobotomyRequestForm", 74, 45){
	this->_target = "";
}

RobotomyRequestForm::RobotomyRequestForm(const RobotomyRequestForm &copy): AForm(copy.getName(), copy.getRequiredGrade(), copy.getExecuteGrade()) {
    *this = copy;
}

RobotomyRequestForm::RobotomyRequestForm(std::string target) : AForm("RobotomyRequestForm", 74, 45) {
	this->_target = target;
}

RobotomyRequestForm &RobotomyRequestForm::operator=(const RobotomyRequestForm &b) {
	AForm::operator=(b);
	this->_target = b._target;
	return (*this);
}

RobotomyRequestForm::~RobotomyRequestForm(void) {
}

std::string RobotomyRequestForm::getTarget() const {
	return this->_target;
}

void RobotomyRequestForm::execute (Bureaucrat &b) const {
	AForm::checkExecute(b);

	// Seeding the random number generator using srand() with the current time is a common practice because it helps ensure that the sequence of random numbers generated by your program is different each time you run it
	// Seed the random number generator with the current time
	std::srand(static_cast<unsigned int>(std::time(NULL)));

	// Generate a random number between 0 and 1
	int randomValue = (std::rand() % 2);

	std::cout << "Makes some drilling noises..." << std::endl;
	if (randomValue == 0)
		std::cout << getTarget() << " has been robotomized successfully." << std::endl;
	else
		std::cout << getTarget() << " robotomization failed." << std::endl;
}
